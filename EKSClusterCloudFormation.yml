Description: >
    This stack contains the information for the creation of a EKS cluster and EKS nodes (in this case 1 node is going to be created)

Parameters:

    EnvironmentName:
        Description: Name of the environment for Capstone Project
        Type: String

    VpcCIDR: 
        Description: The range of Ips supported by the Vpc
        Type: String
        Default: 192.168.0.0/16

    PublicSubnetAZ1CIDR:
        Description: The range of Ips for the public subnet in the first availability zone
        Type: String
        Default: 192.168.0.0/19
    
    PublicSubnetAZ2CIDR:
        Description: The range of Ips for the public subnet in the first availability zone
        Type: String
        Default: 192.168.32.0/19
    
    PublicSubnetAZ3CIDR:
        Description: The range of Ips for the public subnet in the first availability zone
        Type: String
        Default: 192.168.64.0/19

    PrivateSubnetAZ1CIDR:
        Description: The range of Ips for the public subnet in the first availability zone
        Type: String
        Default: 192.168.96.0/19

    PrivateSubnetAZ2CIDR:
        Description: The range of Ips for the public subnet in the first availability zone
        Type: String
        Default: 192.168.128.0/19
    
    PrivateSubnetAZ3CIDR:
        Description: The range of Ips for the public subnet in the first availability zone
        Type: String
        Default: 192.168.160.0/19

Resources:

    ControlPlane:
        Type: AWS::EKS::Cluster
        Properties:
            Name: final-project-udacity-my-real-test
            ResourcesVpcConfig:
                SecurityGroupIds:
                    - !Ref ControlPlaneSecurityGroup
                SubnetIds:
                    - !Ref PublicSubnetAZ1
                    - !Ref PublicSubnetAZ2
                    - !Ref PublicSubnetAZ3
                    - !Ref PrivateSubnetAZ1
                    - !Ref PrivateSubnetAZ2
                    - !Ref PrivateSubnetAZ3
            RoleArn: !GetAtt 
                - ServiceRole
                - Arn
        Version: 1.17

    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            EnableDnsSupport: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-VPC

    ##Subnets

    #Public
    PublicSubnetAZ1:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-2a
            CidrBlock: !Ref PublicSubnetAZ1CIDR
            MapPublicIpOnLaunch: true
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-PublicSubnetAZ1

    PublicSubnetAZ2:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-2b
            CidrBlock: !Ref PublicSubnetAZ2CIDR
            MapPublicIpOnLaunch: true
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-PublicSubnetAZ2

    PublicSubnetAZ3:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-2c
            CidrBlock: !Ref PublicSubnetAZ3CIDR
            MapPublicIpOnLaunch: true
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-PublicSubnetAZ3
    
    #Private
    PrivateSubnetAZ1:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-2a
            CidrBlock: !Ref PrivateSubnetAZ1CIDR
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-PrivateSubnetAZ1

    PrivateSubnetAZ2:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-2b
            CidrBlock: !Ref PrivateSubnetAZ2CIDR
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-PrivateSubnetAZ2
    
    PrivateSubnetAZ3:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-2c
            CidrBlock: !Ref PrivateSubnetAZ3CIDR
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-PrivateSubnetAZ3

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-InternetGateway    
    
    NATGateway:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt 
                - NATGatewayElasticIp
                - AllocationId
            SubnetId: !Ref PublicSubnetAZ2
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-NatGateway
    
    NATGatewayElasticIp:
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-InternetGatewayElasticIp
    
    ##Routes

    #Public
    PublicSubnetRoute:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
            RouteTableId: !Ref PublicRouteTable
        DependsOn:
            - VPCGatewayAttachment

    #NatGateway
    NATPrivateSubnetRouteAZ1:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NATGateway
            RouteTableId: !Ref PrivateRouteTableAZ1

    NATPrivateSubnetRouteAZ2:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NATGateway
            RouteTableId: !Ref PrivateRouteTableAZ2

    NATPrivateSubnetRouteAZ3:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NATGateway
            RouteTableId: !Ref PrivateRouteTableAZ3

    ##RouteTables    

    #Private

    PrivateRouteTableAZ1:
        Type: AWS::EC2::RouteTable
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}/PrivateRouteTableAZ1
            VpcId: !Ref VPC

    PrivateRouteTableAZ2:
        Type: AWS::EC2::RouteTable
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}/PrivateRouteTableAZ2
            VpcId: !Ref VPC

    PrivateRouteTableAZ3:
        Type: AWS::EC2::RouteTable
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}/PrivateRouteTableAZ3
            VpcId: !Ref VPC               
            
    #Public
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}/PublicRouteTable
            VpcId: !Ref VPC

    ##RouteTable Associations
    
    #Private
    RouteTableAssociationPrivateAZ1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PrivateRouteTableAZ1
          SubnetId: !Ref PrivateSubnetAZ1
    
    RouteTableAssociationPrivateAZ2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PrivateRouteTableAZ2
          SubnetId: !Ref PrivateSubnetAZ2

    RouteTableAssociationPrivateAZ3:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PrivateRouteTableAZ3
          SubnetId: !Ref PrivateSubnetAZ3

    #Public
    RouteTableAssociationPublicAZ1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetAZ1

    RouteTableAssociationPublicAZ2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetAZ2
    
    RouteTableAssociationPublicAZ3:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetAZ3


    ##SecurityGroups configuration

    #Security Groups
    ClusterNodesSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allows the communication between the nodes in the cluster
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}/ClusterNodesSecurityGroup
            VpcId: !Ref VPC

    ControlPlaneSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allows the communication between the worker nodegroups and the control plane
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}/ControlPlaneSecurityGroup
            VpcId: !Ref VPC

    #IngressRules
    IngressDefaultClusterToNodeSecurityGroup:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Allows the communication between worker nodegroups and control plane
            FromPort: 0
            GroupId: !Ref ClusterNodesSecurityGroup
            IpProtocol: '-1'
            SourceSecurityGroupId: !GetAtt 
                - ControlPlane
                - ClusterSecurityGroupId
            ToPort: 65535

    IngressInterNodeGroupSecurityGroup:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Allows nodes to communicate between them
            FromPort: 0
            GroupId: !Ref ClusterNodesSecurityGroup
            IpProtocol: '-1'
            SourceSecurityGroupId: !Ref ClusterNodesSecurityGroup
            ToPort: 65535

    IngressNodeToDefaultClusterSecurityGroup:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Allows unmanaged nodes to communicate with control plane
            FromPort: 0
            GroupId: !GetAtt 
                - ControlPlane
                - ClusterSecurityGroupId
            IpProtocol: '-1'
            SourceSecurityGroupId: !Ref ClusterNodesSecurityGroup
            ToPort: 65535

    ##Role configuration  
    
    #Policies
    EKSCloudWatchPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: !Sub ${EnvironmentName}-EKSCloudWatchPolicy
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action: 
                        - 'cloudwatch:PutMetricData'
                      Resource: '*'
            Roles:
                - !Ref ServiceRole

    EKSEC2DescribeAccountAttributesPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: !Sub ${EnvironmentName}-EKSCEC2DescribeAccountAttributesPolicy
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action: 
                        - 'ec2:DescribeAccountAttributes'
                      Resource: '*'
            Roles:
                - !Ref ServiceRole

     #Role
    ServiceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - eks-fargate-pods.amazonaws.com
                            - eks.amazonaws.com
                      Action:
                        - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
                - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            Path: /
            RoleName: ServiceRole    
    
    VPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC 

Outputs:

    ClusterSecurityGroupId:
        Export:
            Name: !Sub ${EnvironmentName}-ClusterSecurityGroupId
        Value: !GetAtt 
            - ControlPlane
            - ClusterSecurityGroupId

    VPC:
        Description: VPC created for final project
        Value: !Ref VPC
        Export:
            Name: !Sub ${EnvironmentName}-VPCID

    PublicSubnets:
        Export: 
            Name: !Sub ${EnvironmentName}-PublicSubnets
        Value: !Join 
            - ','
            - - !Ref PublicSubnetAZ1
              - !Ref PublicSubnetAZ2
              - !Ref PublicSubnetAZ3
